function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var mac = navigator.platform.match(/(Mac|iPhone|iPod|iPad)/i) ? true : false;
var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
if (isSafari) {
  document.documentElement.classList.add('is-safari');
}

// Polyfills for IE
(function () {
  if (!Element.prototype.closest) {
    Element.prototype.closest = function (css) {
      var node = this;
      while (node) {
        if (node.matches(css)) return node;
        node = node.parentElement;
      }
      return null;
    };
  }
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector;
  }
})();
var isMobile = {
  Android: function Android() {
    return navigator.userAgent.match(/Android/i);
  },
  BlackBerry: function BlackBerry() {
    return navigator.userAgent.match(/BlackBerry/i);
  },
  iOS: function iOS() {
    return navigator.userAgent.match(/iPhone|iPad|iPod/i);
  },
  Opera: function Opera() {
    return navigator.userAgent.match(/Opera Mini/i);
  },
  Windows: function Windows() {
    return navigator.userAgent.match(/IEMobile/i);
  },
  any: function any() {
    return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();
  }
};
function debounce(func, wait, immediate) {
  var timeout;
  return function () {
    var context = this,
      args = arguments;
    var later = function later() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}
function getScrollbarWidth() {
  var outer = document.createElement("div");
  outer.style.visibility = "hidden";
  outer.style.width = "100px";
  outer.style.msOverflowStyle = "scrollbar";
  document.body.appendChild(outer);
  var widthNoScroll = outer.offsetWidth;
  outer.style.overflow = "scroll";
  var inner = document.createElement("div");
  inner.style.width = "100%";
  outer.appendChild(inner);
  var widthWithScroll = inner.offsetWidth;
  outer.parentNode.removeChild(outer);
  return widthNoScroll - widthWithScroll;
}
function hasScrollbar() {
  return document.documentElement.scrollHeight > window.innerHeight;
}
function number_format(number, decimals, dec_point, thousands_sep) {
  number = (number + '').replace(/[^0-9+\-Ee.]/g, '');
  var n = !isFinite(+number) ? 0 : +number,
    prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
    sep = typeof thousands_sep === 'undefined' ? ',' : thousands_sep,
    dec = typeof dec_point === 'undefined' ? '.' : dec_point;
  var s = '';
  var toFixedFix = function toFixedFix(n, prec) {
    var k = Math.pow(10, prec);
    return '' + (Math.round(n * k) / k).toFixed(prec);
  };
  s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
  if (s[0].length > 3) {
    s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
  }
  if ((s[1] || '').length < prec) {
    s[1] = s[1] || '';
    s[1] += new Array(prec - s[1].length + 1).join('0');
  }
  return s.join(dec);
}
function modalOpenMac() {
  if (mac) {
    if (document.documentElement.scrollHeight > window.innerHeight && !document.documentElement.classList.contains("apple-fix")) {
      var scrollTop = window.scrollY || document.documentElement.scrollTop;
      document.documentElement.style.top = "-".concat(scrollTop, "px");
      document.documentElement.classList.add("apple-fix");
    }
  }
}
function modalCloseMac() {
  if (mac) {
    var scrollTop = parseInt(document.documentElement.style.top, 10);
    document.documentElement.classList.remove("apple-fix");
    document.documentElement.style.top = '';
    window.scrollTo(0, -scrollTop);
  }
}
var NoScroll = /*#__PURE__*/function () {
  function NoScroll(fixedElements) {
    _classCallCheck(this, NoScroll);
    this.fixForIOS12 = true;
    this.gsapScrollTrigger = typeof ScrollTrigger !== 'undefined';
    this.html = document.documentElement;
    this.body = document.body;
    this.scrollTop = 0;
    this.scrollWidth = this.getScrollWidth();
    this.fixedElements = document.querySelectorAll(fixedElements);
    this.isScrollOffFlag = false;
    this.createCss();
  }
  return _createClass(NoScroll, [{
    key: "createCss",
    value: function createCss() {
      var css = this.fixForIOS12 ? ".noScroll { position: fixed; overflow: hidden; }" : ".noScroll { overflow: hidden; }";
      var style = document.createElement('style');
      style.textContent = css;
      document.head.appendChild(style);
    }
  }, {
    key: "getScrollWidth",
    value: function getScrollWidth() {
      var outer = document.createElement("div");
      outer.style.visibility = "hidden";
      outer.style.width = "100px";
      outer.style.msOverflowStyle = "scrollbar";
      document.body.appendChild(outer);
      var widthNoScroll = outer.offsetWidth;
      outer.style.overflow = "scroll";
      var inner = document.createElement("div");
      inner.style.width = "100%";
      outer.appendChild(inner);
      var widthWithScroll = inner.offsetWidth;
      outer.parentNode.removeChild(outer);
      return widthNoScroll - widthWithScroll;
    }
  }, {
    key: "isScrollOff",
    value: function isScrollOff() {
      return this.isScrollOffFlag;
    }
  }, {
    key: "disableScroll",
    value: function disableScroll() {
      var _this = this;
      if (this.fixForIOS12 && this.gsapScrollTrigger) {
        ScrollTrigger.getAll().forEach(function (st) {
          return st.disable();
        });
      }
      this.scrollTop = window.scrollY || this.html.scrollTop;
      this.scrollWidth = this.getScrollWidth();
      this.html.classList.add('noScroll');
      this.html.style.top = "-".concat(this.scrollTop, "px");
      this.html.style.marginRight = "".concat(this.scrollWidth, "px");
      this.html.style.width = "calc(100% - ".concat(this.scrollWidth, "px)");
      this.isScrollOffFlag = true;
      this.fixedElements.forEach(function (el) {
        var elWidth = el.clientWidth;
        var pos = getComputedStyle(el).position;
        var cssWidth = elWidth + _this.scrollWidth >= window.innerWidth ? "".concat(elWidth - _this.scrollWidth, "px") : '';
        if (pos === 'fixed') {
          el.style.width = cssWidth;
          el.style.marginRight = "".concat(_this.scrollWidth, "px");
        }
      });
    }
  }, {
    key: "enableScroll",
    value: function enableScroll() {
      this.html.classList.remove('noScroll');
      this.html.style.top = '';
      this.html.style.marginRight = '';
      this.html.style.width = '';
      this.fixedElements.forEach(function (el) {
        el.style.width = '';
        el.style.marginRight = '';
      });
      window.scrollTo(0, this.scrollTop);
      this.scrollTop = 0;
      this.isScrollOffFlag = false;
      if (this.fixForIOS12 && this.gsapScrollTrigger) {
        ScrollTrigger.getAll().forEach(function (st) {
          return st.enable();
        });
      }
    }
  }]);
}();
var noScroll = new NoScroll('.fixed-element'); // Укажите селектор для фиксированных элементов

function setCSSVarVH() {
  var vh = window.innerHeight * 0.01;
  document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
}
setCSSVarVH();
window.addEventListener('resize', debounce(setCSSVarVH, 160));
document.addEventListener('DOMContentLoaded', function () {
  document.addEventListener('keydown', function (event) {
    // Проверяем, что событие произошло на элементе с классом .default-checkbox__custom
    if (event.target.classList.contains('default-checkbox__custom')) {
      // Проверяем, что нажата клавиша Space (32) или Enter (13)
      if (event.keyCode === 32 || event.keyCode === 13) {
        // Находим ближайший родительский элемент с классом .default-checkbox
        var pb = event.target.closest('.default-checkbox');
        if (pb) {
          // Находим внутри него input и вызываем его клик
          var input = pb.querySelector('input');
          if (input) {
            input.click();
          }
        }
        // Отменяем стандартное поведение
        event.preventDefault();
      }
    }
  });
});
document.addEventListener('DOMContentLoaded', function () {
  document.addEventListener('keydown', function (event) {
    // Проверяем, что событие произошло на элементе с классом .default-radio__custom
    if (event.target.classList.contains('default-radio__custom')) {
      // Проверяем, что нажата клавиша Space (32) или Enter (13)
      if (event.keyCode === 32 || event.keyCode === 13) {
        // Находим ближайший родительский элемент с классом .default-radio
        var pb = event.target.closest('.default-radio');
        if (pb) {
          // Находим внутри него input и вызываем его клик
          var input = pb.querySelector('input');
          if (input) {
            input.click();
          }
        }
        // Отменяем стандартное поведение
        event.preventDefault();
      }
    }
  });
});
document.addEventListener('DOMContentLoaded', function () {
  document.removeEventListener('click', handleSimpleSelectClick);
  document.removeEventListener('keydown', handleSimpleSelectKeydown);
  document.addEventListener('click', handleSimpleSelectClick);
  document.addEventListener('keydown', handleSimpleSelectKeydown);
  function handleSimpleSelectClick(e) {
    var target = e.target;
    if (target.closest('.simple-select .simple-select__main')) {
      var dropdown = target.closest('.simple-select');
      var allDropdowns = document.querySelectorAll('.simple-select');
      allDropdowns.forEach(function (el) {
        if (el !== dropdown) el.classList.remove('is-active');
      });
      dropdown.classList.toggle('is-active');
      if (e.originalEvent) {
        var _dropdown$querySelect;
        (_dropdown$querySelect = dropdown.querySelector('.focus')) === null || _dropdown$querySelect === void 0 || _dropdown$querySelect.classList.remove('focus');
        return;
      }
      if (dropdown.classList.contains('is-active')) {
        var _dropdown$querySelect2;
        (_dropdown$querySelect2 = dropdown.querySelector('.focus')) === null || _dropdown$querySelect2 === void 0 || _dropdown$querySelect2.classList.remove('focus');
        var activeItem = dropdown.querySelector('.simple-select__item.is-active');
        if (activeItem) {
          activeItem.classList.add('focus');
        } else {
          var _dropdown$querySelect3;
          (_dropdown$querySelect3 = dropdown.querySelector('.simple-select__item')) === null || _dropdown$querySelect3 === void 0 || _dropdown$querySelect3.classList.add('focus');
        }
      } else {
        dropdown.focus();
      }
    }
    if (target.closest('.simple-select .simple-select__item:not(.is-active)')) {
      var item = target.closest('.simple-select__item');
      var _dropdown = item.closest('.simple-select');
      var value = item.dataset.value;
      var text = item.textContent;
      _dropdown.classList.remove('is-active');
      _dropdown.querySelectorAll('.simple-select__item').forEach(function (el) {
        return el.classList.remove('is-active');
      });
      _dropdown.querySelector('.simple-select__selected').textContent = text;
      _dropdown.querySelector('input').value = value;
      _dropdown.querySelector('input').dispatchEvent(new Event('change'));
      _dropdown.querySelector('input').blur();
      item.classList.add('is-active');
      item.blur();
    }
    if (!target.closest('.simple-select') && !target.closest('.selectmenu')) {
      document.querySelectorAll('.simple-select, .selectmenu').forEach(function (el) {
        return el.classList.remove('is-active');
      });
    }
  }
  function handleSimpleSelectKeydown(e) {
    var dropdown = e.target.closest('.simple-select');
    if (!dropdown) return;
    var toggle = dropdown.querySelector('.simple-select__main');
    var focusedOption = dropdown.querySelector('.focus') || dropdown.querySelector('.simple-select__item.is-active');
    if (!focusedOption) focusedOption = dropdown.querySelector('.simple-select__item');
    if (e.keyCode === 32 || e.keyCode === 13) {
      if (dropdown.classList.contains('is-active')) {
        focusedOption.click();
      } else {
        toggle.click();
      }
      e.preventDefault();
    } else if (e.keyCode === 40) {
      if (!dropdown.classList.contains('is-active')) {
        toggle.click();
      } else {
        var next = Array.from(focusedOption.parentElement.children).slice(Array.from(focusedOption.parentElement.children).indexOf(focusedOption) + 1).find(function (el) {
          return !el.classList.contains('disabled');
        });
        if (next) {
          var _dropdown$querySelect4;
          (_dropdown$querySelect4 = dropdown.querySelector('.focus')) === null || _dropdown$querySelect4 === void 0 || _dropdown$querySelect4.classList.remove('focus');
          next.classList.add('focus');
        }
      }
      e.preventDefault();
    } else if (e.keyCode === 38) {
      if (!dropdown.classList.contains('is-active')) {
        toggle.click();
      } else {
        var prev = Array.from(focusedOption.parentElement.children).slice(0, Array.from(focusedOption.parentElement.children).indexOf(focusedOption)).reverse().find(function (el) {
          return !el.classList.contains('disabled');
        });
        if (prev) {
          var _dropdown$querySelect5;
          (_dropdown$querySelect5 = dropdown.querySelector('.focus')) === null || _dropdown$querySelect5 === void 0 || _dropdown$querySelect5.classList.remove('focus');
          prev.classList.add('focus');
        }
      }
      e.preventDefault();
    } else if (e.keyCode === 27) {
      if (dropdown.classList.contains('is-active')) {
        toggle.click();
      }
    } else if (e.keyCode === 9) {
      if (dropdown.classList.contains('is-active')) {
        e.preventDefault();
      }
    }
  }
});
function resetSelect(select) {
  document.querySelectorAll(select).forEach(function (el) {
    var input = el.querySelector('input');
    var selected = el.querySelector('.simple-select__selected');
    var defaultValue = input.dataset.defaultValue;
    var placeholder = selected.dataset.placeholder;
    if (defaultValue && !placeholder) {
      var item = el.querySelector(".simple-select__item[data-value=\"".concat(defaultValue, "\"]"));
      input.value = defaultValue;
      selected.textContent = item.textContent;
      el.querySelectorAll('.simple-select__item').forEach(function (item) {
        return item.classList.remove('is-active');
      });
      item.classList.add('is-active');
    } else {
      input.value = '';
      selected.textContent = '';
      el.querySelectorAll('.simple-select__item').forEach(function (item) {
        return item.classList.remove('is-active');
      });
    }
  });
}
document.addEventListener("DOMContentLoaded", function () {
  var inputGroups = document.querySelectorAll('.input-group input, .input-group textarea');
  inputGroups.forEach(function (input) {
    input.addEventListener('focus', function () {
      this.closest('.input-group').classList.add('input-group--focus');
    });
    input.addEventListener('blur', function () {
      var inputGroup = this.closest('.input-group');
      inputGroup.classList.remove('input-group--focus');
      if (this.value.length) {
        inputGroup.classList.add('input-group--notempty');
      } else {
        inputGroup.classList.remove('input-group--notempty');
      }
    });
  });
  var fileInput = document.querySelector('.file-input');
  var dropArea = document.querySelector('.file-drop-area');
  var fileUploadValText = document.querySelector('.file-upload-val__text');
  var fileUploadVal = document.querySelector('.file-upload-val');
  var fileUploadValDel = document.querySelector('.file-upload-val__del');

  // Подсветка области при dragenter, focus, click
  if (fileInput) {
    ['dragenter', 'focus', 'click'].forEach(function (event) {
      fileInput.addEventListener(event, function () {
        dropArea.classList.add('is-active');
      });
    });

    // Возврат к нормальному состоянию при dragleave, blur, drop
    ['dragleave', 'blur', 'drop'].forEach(function (event) {
      fileInput.addEventListener(event, function () {
        dropArea.classList.remove('is-active');
      });
    });

    // Обработка изменения файла
    fileInput.addEventListener('change', function () {
      var filesCount = this.files.length;
      if (filesCount !== 0) {
        var fileName = this.value.split('\\').pop(); // Получаем имя файла
        fileUploadValText.textContent = fileName; // Устанавливаем имя файла в текстовый элемент
        fileUploadVal.classList.add('is-active'); // Активируем блок с именем файла
      }
    });
  }

  // Обработка клика на кнопку удаления
  if (fileUploadValDel) {
    fileUploadValDel.addEventListener('click', function () {
      dropArea.classList.remove('hide'); // Показываем область загрузки
      fileUploadValText.textContent = ''; // Очищаем текст с именем файла
      fileUploadVal.classList.remove('is-active'); // Деактивируем блок с именем файла
      fileInput.value = ''; // Очищаем значение input
    });
  }

  // Находим все элементы с классом input-group__icon
  var icons = document.querySelectorAll('.input-group__icon');

  // Проверяем, есть ли такие элементы на странице
  if (icons.length > 0) {
    // Добавляем обработчик клика на каждый элемент
    icons.forEach(function (icon) {
      icon.addEventListener('click', function () {
        // Находим ближайший инпут с типом password
        var input = this.previousElementSibling;

        // Проверяем, что это действительно инпут и его тип - password
        if (input && input.tagName === 'INPUT' && input.type === 'password') {
          // Меняем тип инпута на text, чтобы показать пароль
          input.type = 'text';
        } else if (input && input.tagName === 'INPUT' && input.type === 'text') {
          // Меняем тип инпута обратно на password, чтобы скрыть пароль
          input.type = 'password';
        }
      });
    });
  } else {
    console.log('Элементы с классом input-group__icon не найдены.');
  }
});
document.addEventListener('DOMContentLoaded', function () {
  document.addEventListener('click', function (e) {
    if (e.target.closest('[data-modal]')) {
      e.preventDefault();
      var newModal = e.target.closest('[data-modal]').dataset.modal;
      if (document.querySelector('.default-modal.is-active')) {
        callbackClose();
        setTimeout(function () {
          return showModal(newModal);
        }, 300);
      } else {
        showModal(newModal);
      }
    }
    if (e.target.closest('.default-modal__close') || e.target.closest('[data-modal-close]')) {
      callbackClose();
    }
  });
  document.addEventListener('click', function (e) {
    if (!e.target.closest('.default-modal__content') && document.querySelector('.default-modal.is-active')) {
      callbackClose();
    }
  });
  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) {
      callbackClose();
    }
  });
});
var modalFixedEl = document.querySelectorAll('[data-modal-fixed]');
function fixedModalFixedEl() {
  modalFixedEl.forEach(function (el) {
    var media = el.dataset.modalFixed;
    if (media && window.innerWidth <= media) return;
    var rect = el.getBoundingClientRect();
    el.style.position = 'fixed';
    el.style.right = 'auto';
    el.style.left = "".concat(rect.left, "px");
    el.style.top = "".concat(rect.top, "px");
    el.style.width = "".concat(rect.width, "px");
  });
}
function unfixedModalFixedEl() {
  modalFixedEl.forEach(function (el) {
    var media = el.dataset.modalFixed;
    if (media && window.innerWidth <= media) return;
    el.style.position = '';
    el.style.right = '';
    el.style.left = '';
    el.style.top = '';
    el.style.width = '';
  });
}
function showModal(modalClass) {
  fixedModalFixedEl();
  setTimeout(function () {
    document.body.classList.add('modal-open');
    var modal = document.querySelector(".".concat(modalClass));
    modalOpenMac();
    if (hasScrollbar()) {
      var scrollWidth = getScrollbarWidth();
      document.documentElement.style.marginRight = "".concat(scrollWidth, "px");
      modal.classList.add('is-active');
    } else {
      modal.classList.add('is-active');
    }
    document.documentElement.classList.add('no-scroll');
    var isIE = /*@cc_on!@*/false || !!document.documentMode;
    if (isIE) {
      var modalContent = modal.querySelector('.default-modal__content');
      if (modalContent.offsetHeight > window.innerHeight) {
        modal.style.display = 'block';
      } else {
        modal.removeAttribute('style');
      }
    }
  }, 0);
}
function callbackClose() {
  if (document.body.classList.contains('modal-open') && !document.body.classList.contains('mob-nav-open')) {
    document.body.classList.remove('modal-open');
    document.querySelectorAll('.default-modal').forEach(function (modal) {
      return modal.classList.remove('is-active');
    });
    setTimeout(function () {
      document.documentElement.classList.remove('no-scroll');
      document.documentElement.style.marginRight = '';
      modalCloseMac();
      unfixedModalFixedEl();
    }, 300);
  } else if (document.body.classList.contains('mob-nav-open')) {
    document.body.classList.remove('modal-open');
    document.querySelectorAll('.default-modal').forEach(function (modal) {
      return modal.classList.remove('is-active');
    });
  }
}
document.addEventListener("DOMContentLoaded", function () {
  var inputGroups = document.querySelectorAll('.input-group input, .input-group textarea');
  inputGroups.forEach(function (input) {
    input.addEventListener('focus', function () {
      this.closest('.input-group').classList.add('input-group--focus');
    });
    input.addEventListener('blur', function () {
      var inputGroup = this.closest('.input-group');
      inputGroup.classList.remove('input-group--focus');
      if (this.value.length) {
        inputGroup.classList.add('input-group--notempty');
      } else {
        inputGroup.classList.remove('input-group--notempty');
      }
    });
  });
  var fileInput = document.querySelector('.file-input');
  var dropArea = document.querySelector('.file-drop-area');
  var fileUploadValText = document.querySelector('.file-upload-val__text');
  var fileUploadVal = document.querySelector('.file-upload-val');
  var fileUploadValDel = document.querySelector('.file-upload-val__del');

  // Подсветка области при dragenter, focus, click
  if (fileInput) {
    ['dragenter', 'focus', 'click'].forEach(function (event) {
      fileInput.addEventListener(event, function () {
        dropArea.classList.add('is-active');
      });
    });

    // Возврат к нормальному состоянию при dragleave, blur, drop
    ['dragleave', 'blur', 'drop'].forEach(function (event) {
      fileInput.addEventListener(event, function () {
        dropArea.classList.remove('is-active');
      });
    });

    // Обработка изменения файла
    fileInput.addEventListener('change', function () {
      var filesCount = this.files.length;
      if (filesCount !== 0) {
        var fileName = this.value.split('\\').pop(); // Получаем имя файла
        fileUploadValText.textContent = fileName; // Устанавливаем имя файла в текстовый элемент
        fileUploadVal.classList.add('is-active'); // Активируем блок с именем файла
      }
    });
  }

  // Обработка клика на кнопку удаления
  if (fileUploadValDel) {
    fileUploadValDel.addEventListener('click', function () {
      dropArea.classList.remove('hide'); // Показываем область загрузки
      fileUploadValText.textContent = ''; // Очищаем текст с именем файла
      fileUploadVal.classList.remove('is-active'); // Деактивируем блок с именем файла
      fileInput.value = ''; // Очищаем значение input
    });
  }

  // Находим все элементы с классом input-group__icon
  var icons = document.querySelectorAll('.input-group__icon');

  // Проверяем, есть ли такие элементы на странице
  if (icons.length > 0) {
    // Добавляем обработчик клика на каждый элемент
    icons.forEach(function (icon) {
      icon.addEventListener('click', function () {
        // Находим ближайший инпут с типом password
        var input = this.previousElementSibling;

        // Проверяем, что это действительно инпут и его тип - password
        if (input && input.tagName === 'INPUT' && input.type === 'password') {
          // Меняем тип инпута на text, чтобы показать пароль
          input.type = 'text';
        } else if (input && input.tagName === 'INPUT' && input.type === 'text') {
          // Меняем тип инпута обратно на password, чтобы скрыть пароль
          input.type = 'password';
        }
      });
    });
  } else {
    console.log('Элементы с классом input-group__icon не найдены.');
  }
});
document.addEventListener('DOMContentLoaded', function () {
  document.addEventListener('click', function (e) {
    if (e.target.closest('[data-modal]')) {
      e.preventDefault();
      var newModal = e.target.closest('[data-modal]').dataset.modal;
      if (document.querySelector('.default-modal.is-active')) {
        callbackClose();
        setTimeout(function () {
          return showModal(newModal);
        }, 300);
      } else {
        showModal(newModal);
      }
    }
    if (e.target.closest('.default-modal__close') || e.target.closest('[data-modal-close]')) {
      callbackClose();
    }
  });
  document.addEventListener('click', function (e) {
    if (!e.target.closest('.default-modal__content') && document.querySelector('.default-modal.is-active')) {
      callbackClose();
    }
  });
  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27) {
      callbackClose();
    }
  });
});
var modalFixedEl = document.querySelectorAll('[data-modal-fixed]');
function fixedModalFixedEl() {
  modalFixedEl.forEach(function (el) {
    var media = el.dataset.modalFixed;
    if (media && window.innerWidth <= media) return;
    var rect = el.getBoundingClientRect();
    el.style.position = 'fixed';
    el.style.right = 'auto';
    el.style.left = "".concat(rect.left, "px");
    el.style.top = "".concat(rect.top, "px");
    el.style.width = "".concat(rect.width, "px");
  });
}
function unfixedModalFixedEl() {
  modalFixedEl.forEach(function (el) {
    var media = el.dataset.modalFixed;
    if (media && window.innerWidth <= media) return;
    el.style.position = '';
    el.style.right = '';
    el.style.left = '';
    el.style.top = '';
    el.style.width = '';
  });
}
function showModal(modalClass) {
  fixedModalFixedEl();
  setTimeout(function () {
    document.body.classList.add('modal-open');
    var modal = document.querySelector(".".concat(modalClass));
    modalOpenMac();
    if (hasScrollbar()) {
      var scrollWidth = getScrollbarWidth();
      document.documentElement.style.marginRight = "".concat(scrollWidth, "px");
      modal.classList.add('is-active');
    } else {
      modal.classList.add('is-active');
    }
    document.documentElement.classList.add('no-scroll');
    var isIE = /*@cc_on!@*/false || !!document.documentMode;
    if (isIE) {
      var modalContent = modal.querySelector('.default-modal__content');
      if (modalContent.offsetHeight > window.innerHeight) {
        modal.style.display = 'block';
      } else {
        modal.removeAttribute('style');
      }
    }
  }, 0);
}
function callbackClose() {
  if (document.body.classList.contains('modal-open') && !document.body.classList.contains('mob-nav-open')) {
    document.body.classList.remove('modal-open');
    document.querySelectorAll('.default-modal').forEach(function (modal) {
      return modal.classList.remove('is-active');
    });
    setTimeout(function () {
      document.documentElement.classList.remove('no-scroll');
      document.documentElement.style.marginRight = '';
      modalCloseMac();
      unfixedModalFixedEl();
    }, 300);
  } else if (document.body.classList.contains('mob-nav-open')) {
    document.body.classList.remove('modal-open');
    document.querySelectorAll('.default-modal').forEach(function (modal) {
      return modal.classList.remove('is-active');
    });
  }
}
//# sourceMappingURL=scripts.min.js.map
